// the underfloor wiring terminal for the APC
// autogenerated when an APC is placed
// all conduit connects go to this object instead of the APC
// using this solves the problem of having the APC in a wall yet also inside an area

/obj/machinery/power/terminal
	name = "terminal"
	icon_state = "term"
	desc = "It's an underfloor wiring terminal for power equipment."
	layer = WIRE_TERMINAL_LAYER //a bit above wires
	var/obj/machinery/power/master = null


/obj/machinery/power/terminal/Initialize(mapload)
	. = ..()

	AddElement(/datum/element/undertile, TRAIT_T_RAY_VISIBLE, use_alpha = TRUE)

/obj/machinery/power/terminal/Destroy()
	if(master)
		master.disconnect_terminal()
		master = null
	return ..()

/obj/machinery/power/terminal/should_have_node()
	return TRUE

/obj/machinery/power/proc/can_terminal_dismantle()
	. = FALSE

/obj/machinery/power/apc/can_terminal_dismantle()
	. = FALSE
	if(opened)
		. = TRUE

/obj/machinery/power/smes/can_terminal_dismantle()
	. = FALSE
	if(panel_open)
		. = TRUE


/obj/machinery/power/terminal/proc/dismantle(mob/living/user, obj/item/I)
	if(isturf(loc))
		var/turf/T = loc
		if(T.underfloor_accessibility < UNDERFLOOR_INTERACTABLE)
			to_chat(user, span_warning("You must first expose the power terminal!"))
			return

	if(master && !master.can_terminal_dismantle())
		return

	user.visible_message(span_notice("[user.name] dismantles the power terminal from [master]."),
		span_notice("You begin to cut the cables..."))

	playsound(src.loc, 'sound/items/deconstruct.ogg', 50, TRUE)
	if(I.use_tool(src, user, 50))
		if(master && !master.can_terminal_dismantle())
			return

		if(prob(50) && electrocute_mob(user, powernet, src, 1, TRUE))
			do_sparks(5, TRUE, master)
			return

		new /obj/item/stack/cable_coil(drop_location(), 10)
		to_chat(user, span_notice("You cut the cables and dismantle the power terminal."))
		qdel(src)

/obj/machinery/power/terminal/wirecutter_act(mob/living/user, obj/item/I)
	..()
	dismantle(user, I)
	return TRUE

/// The evil cousin of the data terminal, the data-enabled terminal.
/obj/machinery/power/terminal/datanet
	name = "data-enabled terminal"
	desc = "It's an underfloor wiring terminal for power equipment. It's been retrofit with extra wires for data networking."
	network_flags = NETWORK_FLAG_POWERNET_DATANODE

//Terminals have an inherent concept of a master that it already manages, so we don't need to handle it here...

//This is going to be major copypaste

/obj/machinery/power/terminal/datanet/post_signal(datum/signal/signal)
	SHOULD_CALL_PARENT(FALSE) //We *ARE* the signal poster.
	if(!powernet || !signal)
		return //What do you expect me to transmit on, the fucking air?
	if(signal.author.resolve() != master)
		CRASH("Data terminal was told to pass a signal from something other than it's master machine?")
	signal.transmission_method = TRANSMISSION_WIRE
	//Fuck you, we're the author now bitch.
	signal.author = WEAKREF(src)
	powernet.queue_signal(signal)

/obj/machinery/power/terminal/datanet/receive_signal(datum/signal/signal, origin)
	SHOULD_CALL_PARENT(FALSE) //We *ARE* the signal poster.
	if(!powernet) //Did we somehow receive a signal without a powernet?
		return //*shrug*
	if(signal.transmission_method != TRANSMISSION_WIRE)
		CRASH("Data-enabled terminal received a non-wire data packet")
	if(master)
		master.receive_signal(signal, ORIGIN_DATA_ENABLED_TERMINAL)
